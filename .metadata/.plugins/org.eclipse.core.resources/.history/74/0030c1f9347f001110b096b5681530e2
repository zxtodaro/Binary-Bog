package com.zxtodaro.binarybog;

import android.content.Context;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.Paint;
import android.graphics.Picture;
import android.graphics.Rect;
import android.util.AttributeSet;
import android.view.View;

public class Environment extends View {
	
	private int mFlagX = -1;
	private int mFlagY =  -1;
	private Bitmap lilyBitmap = null;
	private Bitmap frogBmp = null;
	private Paint water = null;
	private Paint land = null;
	private boolean isFlagHidden = false;
	private int mBoundX = -1;
	private int mBoundY = -1;
	public final int CLOSER = 50;
	public final int CLOSE = 100;
	
	
	//Hides the flag based on the screen boundaries
	public void hideTheFlag(){
		mFlagX = (int) Math.ceil(Math.random() * mBoundX);
		mFlagY = (int) Math.ceil(Math.random() * mBoundY);
		isFlagHidden = true;
		invalidate();
		}
	
	public Environment(Context context, AttributeSet aSet) {
		super(context, aSet);
		lilyBitmap = BitmapFactory.decodeResource(getResources(), R.drawable.lilypad2);
		frogBmp = BitmapFactory.decodeResource(getResources(), R.drawable.frog_player);
		water = new Paint();
		water.setColor(Color.parseColor("#66CCFF"));
		land = new Paint();
		land.setColor(Color.parseColor("#663300"));
		
		
	}
	
	//Draws playspace
		@Override
		public void onDraw(Canvas canvas) {
		if ((mFlagX < 1) || (mFlagY < 1)) {
		mFlagX = (int) (getWidth() / 2) - lilyBitmap.getWidth() / 2;
		mFlagY = (int) (getHeight() / 2) - lilyBitmap.getHeight() / 2;
		mBoundX = (int)getWidth() - lilyBitmap.getWidth();
		mBoundY = (int)getHeight() - lilyBitmap.getHeight();
		}
		//canvas.drawRect((getWidth() / 5), 0, (getWidth() / 5 * 4), getHeight(), river);
		canvas.drawRect(0, 0, (getWidth() / 5 * 1), getHeight(), land);
		canvas.drawRect((getWidth() / 5 * 4), 0, getWidth(), getHeight(), land);
		if (!isFlagHidden) {
		canvas.drawBitmap(lilyBitmap, mFlagX, mFlagY, null);
		}
		}
	
	//Allows the user to give up and reveals flag
	public void giveUp(){
		isFlagHidden = false;
		invalidate();
		}
	
	
	
	public Indicators takeAGuess(float x, float y) {
		//this is our "warm" area
		Rect prettyClose = new Rect(mFlagX - CLOSE, mFlagY - CLOSE, mFlagX+lilyBitmap.getWidth() + CLOSE, mFlagY+lilyBitmap.getHeight() + CLOSE);
		//normalize
		if (prettyClose.left < 0) prettyClose.left = 0;
		if (prettyClose.top < 0) prettyClose.top = 0;
		if (prettyClose.right > mBoundX) prettyClose.right = mBoundX;
		if (prettyClose.bottom > mBoundY) prettyClose.bottom = mBoundY;
		//this is our "hot" area
		Rect reallyClose = new Rect(mFlagX - CLOSER, mFlagY - CLOSER, mFlagX+lilyBitmap.getWidth() + CLOSER, mFlagY+lilyBitmap.getHeight() + CLOSER);
		//normalize
		if (reallyClose.left < 0) reallyClose.left = 0;
		if (reallyClose.top < 0) reallyClose.top = 0;
		if (reallyClose.right > mBoundX) reallyClose.right = mBoundX;
		if (reallyClose.bottom > mBoundY) reallyClose.bottom = mBoundY;
		//this is the area that contains our flag
		Rect bullsEye = new Rect(mFlagX, mFlagY, mFlagX+lilyBitmap.getWidth(), mFlagY+lilyBitmap.getHeight());
		//check to see where on the board the user pressed
		if (bullsEye.contains((int) x, (int)y)) {
		//found it
		isFlagHidden = false;
		invalidate();
		return Indicators.BULLSEYE;
		} else if (reallyClose.contains((int) x, (int)y)) {
		//hot
		return Indicators.HOT;
		} else if (prettyClose.contains((int)x, (int)y)) {
		//warm
		return Indicators.WARM;
		} else {
		//not even close
		return Indicators.COLD;
		}
		}
}
